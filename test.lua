local fn = require'fn'
local assertq = function(a,b)
	return assert(fn().equal(a,b), fn().tostring(a) .. ' != ' .. fn().tostring(b))
end

assertq( fn(1,10), {1,2,3,4,5,6,7,8,9,10} )
assertq( fn(10,1,-2), {10,8,6,4,2})
assertq( fn(5), {1,2,3,4,5} )
assertq( fn'^'(2,10), 2^10)
assertq( fn'//'(10,3), 3 )
assertq( fn'//'(-10,3), -4 )
assertq( fn'empty?'{1,2,3}, false )
assertq( fn'empty?'{}, true )
assertq( fn'id?''asd123', true )
assertq( fn'id?''1asd123', false )
assertq( fn'id?''asd_1_23', true )
assertq( fn'id?''__asd123', true )
assertq( fn'id?''1123', false )
assertq( fn'id?''#*$(', false )
assertq( fn{1,2,3,4,5}:foldl(fn'*',1), 120 )
assertq( fn{1,2,3,4,5}:foldr(fn'..',''), '12345' )
assertq( fn{1,2,3,4}:sum(), 10 )
assertq( fn{1,2,3,4,5,6,7,8}:sub( 5 ), {5,6,7,8} )
assertq( fn{1,2,3,4,5,6,7,8}:sub( -2 ), {7,8} )
assertq( fn{1,2,3,4,5,6,7,8}:sub( 1, 1 ), {1} )
assertq( fn{1,2,3,4,5,6,7,8}:sub( 3, 5 ), {3,4,5} )
assertq( fn{1,2,3,4,5,6,7,8}:sub( 5, -2), {5,6,7} )
print('shuffling:', fn(10):shuffle():tostring())
assertq( fn{1,2,3,4}:reverse(), {4,3,2,1} )
assertq( fn{1,2,3,4}:insert{5,6}, {1,2,3,4,5,6} )
assertq( fn{5,6}:insert{5,5}, {5,6,5,5} )
assertq( fn{1,2,3,4}:insert({5,5},1), {5,5,1,2,3,4} )
assertq( fn{1,2,3,4}:insert({5,5},-1),{1,2,3,4,5,5} )
assertq( fn{1,2,3,4}:insert({5,5},4),{1,2,3,5,5,4})
assertq( fn{1,2,3,4}:insert({5,5},5),{1,2,3,4,5,5})
assertq( fn{1,2,3,4}:insert({5,5},3),{1,2,5,5,3,4})
assertq( fn{1,2,3,4}:insert({5,5},-4),{1,5,5,2,3,4})
assertq( fn{1,2,3,4}:insert({5,5},-5),{5,5,1,2,3,4})
assertq( fn{1,2,3,4,5,6,7,8}:partition(fn'even?'), {{2,4,6,8},{1,3,5,7}})
assertq( fn{1,2,3,4,5,6,7,8}:count( fn'x>4' ), 4 )
assertq( fn{1,2,3,4,5,6,7,8}:all( fn'number?' ), true )
assertq( fn{1,2,3,4,5,6,7,8}:all( fn'x<8' ), false )
assertq( fn{1,2,3,4,5,6,7,8}:any( fn'x==3' ), true )
assertq( fn{1,2,3,4,5,6,7,8}:any( fn'boolean?'), false )
assertq( fn{1,2,3,4,5,6,7,8}:filter( fn'x>3 and x<7' ), {4,5,6} )
assertq( fn{1,2,3,4,5,6,7,8}:filter( fn'x<3 and x>7' ), {} )
assertq( fn{1,2,3,4,5,6,7,8}:map( fn'{x}' ), {{1},{2},{3},{4},{5},{6},{7},{8}} )
assertq( fn{5,1,2,4}:keys(), {1,2,3,4} )
assertq( fn{a = 2, z = 3, y = 5}:keys():sort(), {'a','y','z'} )
assertq( fn{a = 5, b = 4, c = 1}:values():sum(), 10 )
assertq( fn{a = 1, b = 2, c = 50, d =22}:values():sort(), {1,2,22,50})
assertq( fn{1,2,3,3,2,1}:copy(), {1,2,3,3,2,1} )
assertq( fn{1,2,3,3,2,1,k=2}:copy(), {1,2,3,3,2,1,k=2} )
assertq( fn{1,2,3,3,2,1,k=2,v = {3,4}}:copy(), {1,2,3,3,2,1,k=2,v = {3,4}} )
assertq( fn{1,2,1,2}:sort(),{1,1,2,2} )
assertq( fn{1,2,1,2}:sort(fn'>'),{2,2,1,1})
assertq( fn{1,2,3,4,1}:indexof(4), 4 )
assertq( fn{1,2,3,4,1}:sort():indexof(4,fn'<'), 5)
assertq( fn{1,2,3,4,5}:indexof(6), nil)
assertq( fn{'a','b','c'}:ipairs(), {{1,'a'},{2,'b'},{3,'c'}} )
assertq( fn{x = 2, y = 3, z = 4}:pairs():sort(fn'x[1]<y[1]'),{{'x',2},{'y',3},{'z',4}})
assertq( fn{{'x',2},{'y',3},{'z',4}}:frompairs(), {x = 2, z = 4, y = 3 } )
assertq( fn{1,2,3,4,5}:update{[2] = 'x'}, {1,'x',3,4,5} )
assertq( fn{1,2,x = 5, y = 6}:update{z = 3}, {1,2,x = 5, y = 6, z = 3} )
assertq( fn{1,2,x = 5, y = 6}:update{[3] = 5, x = 'y'}, {1,2,5,x = 'y', y = 6} )
assertq( fn{1,2,3,4,5,x = 5}:delete{'x'}, {1,2,3,4,5} )
assertq( fn{1,2,3,4,5,x = 5}:delete{x = 'x'}, {1,2,3,4,5} )
assertq( fn{1,1,2,2,3,3}:unique(), {1,2,3} )
assertq( fn{1,2,3}:nkeys(), 3 )
assertq( fn{x = 3, y = 3}:nkeys(), 2 )
assertq( fn{1,2, x = 3, y = 22}:nkeys(), 4 )
assertq( fn{1,2,3,4}:concat(), '1234' )
assertq( fn{1,2,3,4}:tostring(), '[1,2,3,4]' )
assertq( fn{1,2,3,4}:equal{1,2,3,4}, true )
assertq( fn{1,2,3,4}:equal{1,fn'_',3,4}, true )
assertq( fn{1,2,3,4}:equal{1,2,3}, false )
assertq( fn{1,2,3}:equal{1,2,3,4}, false )
assertq( fn{1,2,3}:equal{1,2,3,fn'...'}, true )
assertq( fn{k = 2, v = 4}:equal{k = 2, v = 4}, true )
assertq( fn{k = 2, v = 4, z = 5}:equal{k = 2, v = 4}, false )
assertq( fn{k = 2, v = 4, z = 5}:equal{fn'...', k = 2, v = 4}, true )
assertq( fn{1,2,3,k = 2, v = 4, z = 5}:equal{1,fn'_',3,k = 2, z = 5, fn'...'}, true )
assertq( fn{1,2,3,4,5,6}:remove{1,3,5}, {2,4,6} )
assertq( fn{1,1,2,3,4,5}:remove{1,5}, {2,3,4} )
assertq( fn{1,6,3,4,6,6,3,4}:remove{6,3,4}, {1} )
assertq( fn{1,6,3,3,5,4,7,1,2}:remove({1,3,4},fn'<'), {6,5,7,2} )
local x = {1,2,3,4}
print('Each element print:')
fn(x):each(print)
print('To string:')
print( fn{1,2,3,4,{5,6},[{1,2}] = {y = {z = {9,10}, 1, 2}, a = 12, g = {4}, 3, 4,{4,[{x=3}] = 5}}}:tostring() )
assertq( fn{1,2,3,5,6,7}:match{1,2,3,fn'X',6,7}, {X = 5} )
assert( fn().equal( fn{1,2,3,5,6,7}:match{1,2,3,fn'X',6}, false ) )
assertq( fn{1,2,3,5,6,7,8,9}:match{1,2,fn'X',5,6,fn'R'}, {X=3, R={7,8,9}})

assertq( fn{1,2,3,4}:match(
	{1,2,3},
	{1,2,3,5},
	{1,2,3,fn'X'},
	{1,2,13} ), {X = 4} )

assertq( fn{x = 6, z = 5, y = 33}:sortedpairs(fn'<'), {{'x',6},{'y',33},{'z',5}} )
assertq( fn{1, 2, [false] = {3,4}, x = 6, [{}] = true}:sortedpairs(), {{false,{3,4}}, {1,1}, {2,2}, {'x', 6}, {{},true}} )
assertq( fn{1,2,3}:match{1,2,fn'N'}, {N = 3})
assertq( fn{1,2,3}:match{1,2,fn'S'}, false )
assertq( fn{1,2,3}:equal{fn'N',fn'N',3}, true )
assertq( fn{1,2,3}:equal{fn'S',2,3}, false )
assertq( fn{1,2,{{'x',5}}}:equal{fn'_',2,{{fn'S',fn'N'}}}, true )
assertq( fn{1,1,'x','y'}:foldl( fn'[]', {{{x={y=1}}}}), 1 )
assertq( fn{1,2,3,4,x = 5, y = 6}:map(fn'x'), {1,2,3,4} )

print('All passed')
