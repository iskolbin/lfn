local table_pack
if table.pack then
	table_pack = table.pack
	table.pack = nil
end

local fn = require("fn")

local function assertq(a, b)
	return assert(fn.equal(a, b), fn.str(a) .. " ~= " .. fn.str(b))
end

assertq(
	fn.inplace_filter({ 1, 2, 3, 4, 5 }, function(x)
		return x > 2
	end),
	{ 3, 4, 5 }
)
assertq(fn({ x = true, y = true, z = true }):issubset({ x = true, y = true, z = true }), true)
assertq(fn({ x = true, y = true }):issubset({ x = true, y = true, z = true }), true)
assertq(fn({ x = true, y = true, k = true }):issubset({ x = true, y = true, z = true }), false)
assertq({ fn.op.identity(1, 2, 3) }, { 1, 2, 3 })
assertq(fn.op.truth(), true)
assertq(fn.op.lie(), false)
assertq(fn.op.neg(33), -33)
assertq(fn.op.neg(-42), 42)
assertq(fn.op.add(33, 77), 110)
assertq(fn.op.sub(40, 20), 20)
assertq(fn.op.mul(10, 20), 200)
assertq(fn.op.div(20, 5), 4)
assertq(fn.op.idiv(23, 5), 4)
assertq(fn.op.pow(10, 3), 1000)
assertq(fn.op.inc(2), 3)
assertq(fn.op.dec(-4), -5)
assertq(fn.op.concat("Hello", " world"), "Hello world")
assertq(fn.op.gt(5, 3), true)
assertq(fn.op.gt(3, 5), false)
assertq(fn.op.gt(3, 3), false)
assertq(fn.op.ge(5, 3), true)
assertq(fn.op.ge(3, 5), false)
assertq(fn.op.ge(3, 3), true)
assertq(fn.op.lt(3, 5), true)
assertq(fn.op.lt(5, 3), false)
assertq(fn.op.lt(3, 3), false)
assertq(fn.op.le(3, 5), true)
assertq(fn.op.le(5, 3), false)
assertq(fn.op.le(3, 3), true)
assertq(fn.op.eq(3, 3), true)
assertq(fn.op.eq(3, 2), false)
assertq(fn.op.ne(3, 3), false)
assertq(fn.op.ne(3, 2), true)
assertq(fn.op.land(true, false), false)
assertq(fn.op.land(true, true), true)
assertq(fn.op.lor(true, false), true)
assertq(fn.op.lor(true, true), true)
assertq(fn.op.lnot(true), false)
assertq(fn.op.lnot(false), true)
assertq(fn.op.lxor(true, false), true)
assertq(fn.op.lxor(true, true), false)
assertq(fn.op.lxor(false, false), false)

assertq(fn.p.isnil(nil), true)
assertq(fn.p.isnil(22), false)
assertq(fn.p.iszero(0), true)
assertq(fn.p.iszero(2), false)
assertq(fn.p.ispositive(22), true)
assertq(fn.p.ispositive(-22), false)
assertq(fn.p.isnegative(22), false)
assertq(fn.p.isnegative(-22), true)
assertq(fn.p.iseven(10), true)
assertq(fn.p.iseven(11), false)
assertq(fn.p.isodd(10), false)
assertq(fn.p.isodd(11), true)
assertq(fn.p.isnumber(5), true)
assertq(fn.p.isnumber(3.5), true)
assertq(fn.p.isinteger(5), true)
assertq(fn.p.isinteger(3.5), false)
assertq(fn.p.isinteger("3.5"), false)
assertq(fn.p.isboolean(true), true)
assertq(fn.p.isboolean(false), true)
assertq(fn.p.isboolean(nil), false)
assertq(fn.p.isboolean(11), false)
assertq(fn.p.isstring(55), false)
assertq(fn.p.isstring("asd"), true)
assertq(fn.p.isfunction(function() end), true)
assertq(fn.p.isfunction(math.sin), true)
assertq(fn.p.isfunction(22), false)
assertq(fn.p.istable({}), true)
assertq(fn.p.istable(22), false)
assertq(fn.p.isuserdata(io.tmpfile()), true)
assertq(fn.p.isuserdata(22), false)
assertq(fn.p.isthread(coroutine.create(function() end)), true)
assertq(fn.p.isthread(function() end), false)
assertq(fn.p.isid("Abacz"), true)
assertq(fn.p.isid("zzz123"), true)
assertq(fn.p.isid(" Abasd"), false)
assertq(fn.p.isid("__aa"), true)
assertq(fn.p.isid("22ss"), false)
assertq(fn.p.isid("asd$"), false)
assertq(fn.p.isid("asd "), false)
assertq(fn.p.isempty({}), true)
assertq(fn.p.isempty({ 1 }), false)
assertq(fn.p.isempty({ x = 2 }), false)

assertq(fn("55")(), 55)
assertq(fn.reduce({ 1, 2, 3, 4 }, fn([[@1 * @2]]), 1), 24)
assertq(fn.sum({ 1, 2, 3, 4 }), 10)
assertq(fn.sub({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 1, 5), { 1, 2, 3, 4, 5 })
assertq(fn.sub({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 6, -2), { 6, 7, 8, 9 })
assertq(fn.sub({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, -4, -2), { 7, 8, 9 })
assertq(fn.sub({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 7), { 7, 8, 9, 10 })
assertq(fn.sub({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, -1), { 10 })
assertq(fn.sub({ 1, 2, 3, 4, 5 }, 0), { 1, 2, 3, 4, 5 })
assertq(fn.inplace_sub({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 1, 5), { 1, 2, 3, 4, 5 })
assertq(fn.inplace_sub({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 6, -2), { 6, 7, 8, 9 })
assertq(fn.inplace_sub({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, -4, -2), { 7, 8, 9 })
assertq(fn.inplace_sub({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 7), { 7, 8, 9, 10 })
assertq(fn.inplace_sub({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, -1), { 10 })
assertq(fn.inplace_sub({ 1, 2, 3, 4, 5 }, 0), { 1, 2, 3, 4, 5 })
assertq(fn.reverse({ 1, 2, 3, 4, 5 }), { 5, 4, 3, 2, 1 })
assertq(fn.insert({ 1, 2, 3, 4, 5 }, -1, 6), { 1, 2, 3, 4, 5, 6 })
assertq(fn.insert({ 1, 2, 3, 4, 5 }, 1, 0), { 0, 1, 2, 3, 4, 5 })
assertq(fn.insert({ 1, 2, 3, 4, 5 }, 3, 2.5), { 1, 2, 2.5, 3, 4, 5 })
assertq(fn.insert({ 1, 2, 3, 4, 5 }, -1, 6), { 1, 2, 3, 4, 5, 6 })
assertq(fn.insert({ 1, 2, 3, 4, 5 }, -1, 6, 7, 8, 9, 10), { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 })
assertq(fn.insert({ 1, 2, 3, 4, 5 }, 1, 6, 7), { 6, 7, 1, 2, 3, 4, 5 })
assertq(fn.insert({ 1, 2, 3, 4, 5 }, 2, 6, 7), { 1, 6, 7, 2, 3, 4, 5 })
assertq(fn.insert({ 1, 2, 3, 4, 5 }, -2, 6, 7), { 1, 2, 3, 4, 6, 7, 5 })
assertq(fn.insert({ 1, 2, 3, 4, 5 }, -1000, 6, 7), { 6, 7, 1, 2, 3, 4, 5 })
assertq(fn.insert({ 1, 2, 3, 4, 5 }, 1000, 6, 7), { 1, 2, 3, 4, 5, 6, 7 })
assertq(fn.exclude({ 1, 2, 3, 4, 5 }, 3, 4), { 1, 2, 5 })
assertq(fn.exclude({ 1, 2, 3, 4, 5 }, 1, 6, 3), { 2, 4, 5 })
assertq(fn.inplace_exclude({ 1, 2, 3, 4, 5 }, 3, 4), { 1, 2, 5 })
assertq(fn.inplace_exclude({ 1, 2, 3, 4, 5 }, 1, 6, 3), { 2, 4, 5 })
assertq(fn.partition({ 1, 2, 3, 4, 5, 6 }, fn([[@>3]])), { { 4, 5, 6 }, { 1, 2, 3 } })
assertq(fn.partition({ 1, 2, 3, 4, 5, 6 }, fn.op.truth), { { 1, 2, 3, 4, 5, 6 }, {} })
assertq(fn.flat({ 1, 2, 3, { 4, { 5, { 6, 7, { 8 }, 9 }, 10 } }, 11 }), { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 })
assertq(fn.flat({ 1, 2, 3, 4 }), { 1, 2, 3, 4 })
assertq(fn.count({ 1, 2, 3, 4, 5 }, fn.p.isodd), 3)
assertq(fn.count({ 1, 2, 3, 4, 5 }, fn([[@<3]])), 2)
assertq(fn.count({ { 1 }, { 2 }, { 3 } }, fn([[@[1]>2]])), 1)
assertq(fn.every({ 1, 2, 3, "t" }, fn.p.isinteger), false)
assertq(fn.every({ 1, 2, 3, 5 }, fn.p.isinteger), true)
assertq(fn.some({ 1, 2, 3, "t", {} }, fn.p.istable), true)
assertq(fn.some({ 1, 2, 3, 5 }, fn.p.istable), false)
assertq(fn.filter({ 10, 20, 30, 40, 50 }, fn([[@>30]])), { 40, 50 })
assertq(fn.filter({ 10, 20, 30, 40, 50 }, fn([[@2<5 and @1>30]])), { 40 })
assertq(fn.filter({ 10, 20, 3, 40, 50 }, fn([[@3[@2] == @2]])), { 3 })
assertq(fn.inplace_filter({ 10, 20, 30, 40, 50 }, fn([[@>30]])), { 40, 50 })
assertq(fn.inplace_filter({ 10, 20, 30, 40, 50 }, fn([[@2<5 and @1>30]])), { 40 })
assertq(fn.inplace_filter({ 10, 20, 3, 40, 50 }, fn([[@3[@2] == @2]])), { 3 })
assertq(fn.map({ 1, 2, 3, 4, 5 }, fn.op.inc), { 2, 3, 4, 5, 6 })
assertq(fn.map({ 2, 3, 4, 5, 6 }, fn([[(@2 > 3) and 2*@1 or -@1]])), { -2, -3, -4, 10, 12 })
assertq(fn.inplace_map({ 1, 2, 3, 4, 5 }, fn.op.inc), { 2, 3, 4, 5, 6 })
assertq(fn.inplace_map({ 2, 3, 4, 5, 6 }, fn([[(@2 > 3) and 2*@1 or -@1]])), { -2, -3, -4, 10, 12 })
assertq(fn.sort({ 1, 2, 4, 5, 2, 3, -1 }), { -1, 1, 2, 2, 3, 4, 5 })
assertq(fn.sort({ 1, 2, 4, 5, 2, 3, -1 }, fn.op.gt), { 5, 4, 3, 2, 2, 1, -1 })
assertq(fn.sort(fn.keys({ x = 2, y = 3 })), { "x", "y" })
assertq(fn.keys({ 1, 2, 4, 7 }), { 1, 2, 3, 4 })
assertq(fn.sort(fn.values({ x = 2, y = 3 })), { 2, 3 })
assertq(fn.values({ 1, 2, 3, 5 }), { 1, 2, 3, 5 })
assertq(fn.copy({ 1, 2, 3, x = 5, z = { 1, 2 } }), { 1, 2, 3, x = 5, z = { 1, 2 } })
local t = {}
t[1] = t
local t_c = fn.deepcopy(t)
assert(t_c ~= t)
assert(t_c[1] == t_c)
assertq(fn.copy({ 1, 2, 3, x = 5, z = { 1, 2 } }), { 1, 2, 3, x = 5, z = { 1, 2 } })
assertq(fn.indexof({ 1, 2, "x", 4, 5, 6 }, "x"), 3)
assertq(fn.indexof({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 7, fn.lt), 7)
assertq(fn.indexof({ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }, 7, fn.gt), 4)
assertq(fn.find({ "x", "y", "z", "aa", "b", "c" }, fn([[@ == "aa"]])), "aa")
assertq(fn.find({ { 1 }, { 2 }, { 3 }, { 4 } }, fn("@[1] == 3")), { 3 })
assertq(fn.ientries({ 2, 3, 4 }), { { 1, 2 }, { 2, 3 }, { 3, 4 } })
assertq(fn.sort(fn.entries({ x = 2, y = 3, z = 4 }), fn("@1[1] < @2[1]")), { { "x", 2 }, { "y", 3 }, { "z", 4 } })
assertq(fn.fromentries({ { "x", 2 }, { "y", 3 }, { "z", 4 } }), { x = 2, y = 3, z = 4 })
assertq(fn.unique({ 1, 2, 3, 1, 2, 3, 1, 4, 5 }), { 1, 2, 3, 4, 5 })
assertq(fn.count({ x = 2, y = 3 }), 2)
assertq(fn.count({ x = 3, y = 3, 1, 2 }), 4)
assertq(fn.range(0), {})
assertq(fn.range(-1), { -1 })
assertq(fn.range(1, 5, -1), {})
assertq(fn.range(-1, -5, 1), {})
assertq(fn.range(-1, -5), { -1, -2, -3, -4, -5 })
assertq(fn.range(5), { 1, 2, 3, 4, 5 })
assertq(fn.range(2, 5), { 2, 3, 4, 5 })
assertq(fn.range(5, 1), { 5, 4, 3, 2, 1 })
assertq(fn.range(1, 6, 2), { 1, 3, 5 })
assertq(fn.range(5, 2, -2), { 5, 3 })
assertq(fn.concat(fn.reverse(fn.chars("Baroque"))), ("Baroque"):reverse())
assertq(fn.concat(fn.reverse(fn.utf8chars("Шаломчик"))), "кичмолаШ")
assertq(#(fn.utf8chars("Вариация")), 8)
assertq(#(fn.chars("Вариация")), string.len("Вариация"))
assertq(fn({ 1, 2, 3 }):rep(3):value(), { 1, 2, 3, 1, 2, 3, 1, 2, 3 })
assertq(fn({ 1, 2, 3 }):rep(3, "x"):value(), { 1, 2, 3, "x", 1, 2, 3, "x", 1, 2, 3 })
assertq(fn({ 1, 2, 3, 4 }):zip():value(), { 1, 2, 3, 4 })
assertq(fn({}):zip():value(), {})
assertq(fn.zip({ 1, 2 }, { "x", "y" }, { 55.55, 66.66 }), { { 1, "x", 55.55 }, { 2, "y", 66.66 } })
assertq(fn.zip({ 1, 2 }, { "x", "y", "z" }, { 55.55 }), { { 1, "x", 55.55 }, { 2, "y", nil } })
assertq(fn({ { 1, "x", 55.55 }, { 2, "y", 66.66 } }):unzip():value(), { { 1, 2 }, { "x", "y" }, { 55.55, 66.66 } })
assertq(fn.fromentries(fn.zip({ "x", "y", "z" }, { 1, 2, 3 })), { x = 1, y = 2, z = 3 })
assertq(fn.frequencies({ "x", "y", "z", "x", "y", "x" }), { x = 3, y = 2, z = 1 })
assert(fn([[@ - 2]], 2)() == 0)
assert(fn([[@1 + @2 + @3]], 1, 2)(3) == 6)
assertq(fn({ 1, 2, 3, 4 }):insert():value(), { 1, 2, 3, 4 })
assertq(fn.copy(10), 10)
assertq(fn.equal({ x = 2, y = 3, z = { x = 2 } }, { x = 2, y = 3, z = fn._ }), true)
assertq(fn.equal({ x = 2, y = 3, z = { x = 2 } }, { x = 2, y = 3, z = { x = 4 } }), false)
assertq(fn.equal({ x = 2, y = 3, z = { x = 2 } }, { x = 2, y = 3, z = { x = {} } }), false)
assertq(fn.equal({ x = 2, y = 3, z = { x = 2 } }, { x = 2, y = 4, z = { x = 2 } }), false)
assertq(fn.equal({ x = 2, y = 3, z = { x = 2 } }, { x = 2, y = 3, z = { x = 2, u = 22 } }), false)
assertq(fn.equal({ [true] = 1 }, { [true] = 1 }), true)
assertq(fn({ 1, 2, 3, 4 }):reduce(fn([[@1+@2, @3 == 3]]), 0), 6)
assertq(fn({ 1, 2, 3, 4 }):reduce(fn([[@+@2, @3 == 3]]), 0), 6)
local x = {}
x[x] = x
assertq(x, x)
assertq(fn({ 1, 2, 3, 4 }):chunk():value(), { 1, 2, 3, 4 })
assertq(fn({ 1, 2, 3, 4 }):chunk(1):value(), { { 1 }, { 2 }, { 3 }, { 4 } })
assertq(fn({ 1, 2, 3, 4 }):chunk(2):value(), { { 1, 2 }, { 3, 4 } })
assertq(fn({ 1, 2, 3, 4 }):chunk(3):value(), { { 1, 2, 3 }, { 4 } })
assertq(fn({ 1, 2, 3, 4 }):chunk(4):value(), { { 1, 2, 3, 4 } })
assertq(fn({ 1, 2, 3, 4 }):chunk(1):flat():value(), { 1, 2, 3, 4 })
assertq(fn({ 1, 2, 3, 4, 5 }):chunk(1, 2):value(), { { 1 }, { 2, 3 }, { 4 }, { 5 } })
assertq(fn({ 1, 2, 3, 4, 5, 6, 7 }):chunk(1, 2, 3):value(), { { 1 }, { 2, 3 }, { 4, 5, 6 }, { 7 } })
assertq(fn({ x = 5, y = 6, z = 8 }):difference():value(), { x = 5, y = 6, z = 8 })
assertq(fn({ x = 5, y = 6, z = 8 }):difference({}):value(), { x = 5, y = 6, z = 8 })
assertq(fn({ x = 5, y = 6, z = 8 }):difference({ x = 6 }, {}):value(), { y = 6, z = 8 })
assertq(fn({ x = 5, y = 6, z = 8 }):difference({ x = 6 }):value(), { y = 6, z = 8 })
assertq(
	fn({ x = 5, y = 6, z = 8 }):difference({ x = 6, k = 8 }, { y = 11, a = 18 }, { c = 3, x = 4 }):value(),
	{ z = 8 }
)
assertq(fn({ x = 5, y = 6, z = 8 }):intersection({ x = 1 }):value(), { x = 5 })
assertq(fn({ x = 5, y = 6, z = 8 }):intersection():value(), {})
assertq(fn({ x = 5, y = 6, z = 8 }):intersection({}):value(), {})
assertq(fn({ x = 5, y = 6, z = 8 }):intersection({ x = 1 }, { y = 2 }):value(), {})
assertq(fn({ x = 5, y = 6, z = 8 }):intersection({ x = 1, y = 2 }, { y = 4 }):value(), { y = 6 })
assertq(fn({ x = 5, y = 6, z = 8 }):intersection({ x = 1, y = 2 }, { y = 4 }, {}):value(), {})
assertq(fn({ x = 5, y = 6, z = 8 }):union():value(), { x = 5, y = 6, z = 8 })
assertq(fn({ x = 5, y = 6, z = 8 }):union({}):value(), { x = 5, y = 6, z = 8 })
assertq(fn({ x = 5, y = 6, z = 8 }):union({ x = 11 }):value(), { x = 11, y = 6, z = 8 })
assertq(fn({ x = 5, y = 6, z = 8 }):union({ x = 11 }, { y = 22 }):value(), { x = 11, y = 22, z = 8 })
assertq(fn({ x = 5, y = 6, z = 8 }):union({ x = 11 }, { y = 22, b = 14 }):value(), { b = 14, x = 11, y = 22, z = 8 })
assertq(fn({ x = 5 }):diff({ x = 5 }):value(), {})
assertq(fn({ x = 5 }):diff({ x = 6 }):value(), { x = 6 })
assertq(fn({ x = 5 }):diff({ x = 5, y = 5 }):value(), { y = 5 })
assertq(fn({ x = 5 }):diff({ x = 6, y = 5 }):value(), { x = 6, y = 5 })
assertq(fn({ x = 5 }):diff({ y = 5 }):value(), { x = fn.DEL, y = 5 })
assertq(fn({ x = 5 }):diff({ y = { z = 6 } }):value(), { x = fn.DEL, y = { z = 6 } })
assertq(fn({ x = 5 }):diff({ x = { z = 6 } }):value(), { x = { z = 6 } })
assertq(fn.diff(5, 6), 6)
assertq(fn.diff({}, "str"), "str")
assertq(fn.diff("asd", {}), {})
assertq(fn({ x = { y = 6 } }):diff({ x = { y = 6 } }):value(), {})
assertq(fn({ x = { y = 6 } }):diff({ x = { y = 7 } }):value(), { x = { y = 7 } })
assertq(fn({ x = { y = 6 } }):diff({ x = { z = 7 } }):value(), { x = { y = fn.DEL, z = 7 } })
assertq(fn({ x = { y = 6 } }):diff({ x = 5 }):value(), { x = 5 })
assertq(fn({ x = 5 }):patch({ x = 5 }):value(), { x = 5 })
assertq(fn({ x = 5 }):patch({ x = 6 }):value(), { x = 6 })
assertq(fn({ x = { y = 6 } }):patch({ x = 6 }):value(), { x = 6 })
assertq(fn({ x = { y = 6 }, z = 55 }):patch({ x = { y = 5 } }):value(), { x = { y = 5 }, z = 55 })
assertq(fn({ x = 6 }):patch(3):value(), { x = 6 })
assertq(fn({ x = 6, y = 7 }):patch({ y = fn.DEL }):value(), { x = 6 })
assertq(fn.patch("ddd", { x = 4 }), "ddd")
assertq(fn.patch("ddd", 555), "ddd")
assertq(
	fn({ x = { y = 6, z = { 55 }, u = 69 } }):patch({ x = { z = { n = 5 } } }):value(),
	{ x = { y = 6, z = { 55, n = 5 }, u = 69 } }
)
assertq(fn({ 1, 2, 3, 4, 5, 6 }):min(), 1)
assertq(fn({ -1, 2, 3, 4, 5, -6 }):min(), -6)
assertq(fn({ -1, 2, 3, 4, 5, -6 }):max(), 5)
assertq(fn({ 1, 2, 3, 4, 5, 6 }):shuffle():max(), 6)
assertq(fn({ 3, 4, 5, 6, 7, 1 }):sort(fn([[@1 > @2]])):value(), { 7, 6, 5, 4, 3, 1 })
assertq(fn({ 1, 2, 3 }):combinations(2):value(), { { 1, 2 }, { 1, 3 }, { 2, 3 } })
assertq(
	fn({ 1, 2, 3 }):permutations():value(),
	{ { 1, 2, 3 }, { 2, 1, 3 }, { 3, 1, 2 }, { 1, 3, 2 }, { 2, 3, 1 }, { 3, 2, 1 } }
)
assertq(
	fn({ 1, 2, 3 }):combinations(2):flatmap(fn.permutations):value(),
	{ { 1, 2 }, { 2, 1 }, { 1, 3 }, { 3, 1 }, { 2, 3 }, { 3, 2 } }
)

assertq(fn({ 1, 2, 3, 4 }):at(1), 1)
assertq(fn({ 1, 2, 3, 4 }):at(-1), 4)
assertq(
	fn({ k = 2, z = 3 }):update("k", function(v)
		return v + 3
	end):value(),
	{ k = 5, z = 3 }
)
assertq(fn({ k = 2, z = 3 }):update("k", function() end):value(), { z = 3 })
assertq(fn({ 1, 2, 3, x = 2 }):str(), "{1,2,3,\n  x = 2\n}")
assertq(fn({ 1, 2, 3, x = 2 }):str([[compact]]), "{1,2,3,x=2}")
assertq(fn.split("Most people like to eat apples", " "), { "Most", "people", "like", "to", "eat", "apples" })
assertq(fn.split("Most people like to eat apples"), { "Most", "people", "like", "to", "eat", "apples" })
assertq(
	fn({ x = 2, y = 3, z = 5 }):reducekv(function(tbl, k, v)
		if k == "y" then
			tbl[k] = 6
		end
		if v == 2 then
			tbl.w = 7
		end
		return tbl
	end, {}),
	{ y = 6, w = 7 }
)
assertq(fn({ 1, 2, 3, 4, 5 }):reduce(fn.op.add), 15)
assertq(fn({ 1, 2, 3, 4, 5 }):product(), 120)
assertq(fn({ 1, 2, 3, 4, 5 }):product(0), 0)
assertq(fn({ 1, 2, 3, 4, 5 }):product(10), 1200)
assertq(fn.pack(1, 2, 3, 4), { 1, 2, 3, 4, n = 4 })
assertq(fn({ -11, -10, -1, 0, 1, 24, 25, 26, 123, 124, 125, 250 }):indexof(25, fn.op.sub), 7)
assertq(
	fn({ 1, 2, 3, 4 }):each(function(v, i, arr)
		arr[i] = -v
	end):value(),
	{ -1, -2, -3, -4 }
)
for _ = 1, 5 do
	local tbl = {}
	for i = 1, 100 do
		tbl[i] = math.random()
	end
	assertq(fn(tbl):stablesort(), fn(tbl):sort())
end
assertq(fn({ 1, 2, 3, 4, 5 }):insert(6):value(), { 1, 2, 3, 4, 5, 6 })
assertq(fn.op.mod(5, 2), 1)
assertq(fn({ 1, 2, 33, 4, 5 }):get(3), 33)
assertq(fn({ 1, { 2, { 3, k = { x = 6 } } } }):get(2, 2, "k", "x"), 6)
assertq(fn({ 1, 2, 3, 4, 5 }):set(3, 33):value(), { 1, 2, 33, 4, 5 })
assertq(fn({ 1, 2, { x = { y = 5 } } }):set(3, "x", "y", 6):value(), { 1, 2, { x = { y = 6 } } })
assertq(fn({ 1, 2, { x = { y = 5 } } }):set(3, "x", "y", fn.DEL):value(), { 1, 2, { x = {} } })
assertq(fn({ 1, 2, { x = { y = 5 } } }):set(3, "x", "z", 55):value(), { 1, 2, { x = { y = 5, z = 55 } } })
assertq(fn({ 1, 2, { x = { y = 5 } } }):set(3, "x", "z", fn.DEL):value(), { 1, 2, { x = { y = 5 } } })
assertq(fn({ 1, 2, 3, 4, 5 }):set(1):value(), { 1, 2, 3, 4, 5 })
assertq(
	fn({ x = 2, y = { z = 4, k = 6 } }):inplace_patch({ y = { z = 5, k = fn.DEL, u = 7 } }):value(),
	{ x = 2, y = { z = 5, u = 7 } }
)

if table_pack then
	table.pack = table_pack
	table_pack = nil
end
